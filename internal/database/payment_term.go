package database

import (
	"database/sql"
	"fmt"
)

// Insert PaymentTerm inserta datos en PAYMENT_TERM asociados a PARTY_ID.
func InsertPaymentTerm(db *sql.DB) error {
	query := `
	INSERT INTO PAYMENT_TERM (
		PARTY_ID, PAYMENT_TYPE_ID, CURRENCY_ID, BANK_ID, EXPIRATION, ACCOUNT_NBR, INTER_ACCOUNT_NBR, PAYMENT_KEY, REQUIRES_RECEIPT
	)
	SELECT
		p.PARTY_ID,
		CASE
			WHEN t.DESCTPCONDCOBRO = 'CARGO A CUENTA' THEN 2000
			WHEN t.DESCTPCONDCOBRO = 'CARGO A TARJETA' THEN 3000
			WHEN t.DESCTPCONDCOBRO = 'COBRO DIRECTO' THEN 1000
			ELSE NULL
		END AS PAYMENT_TYPE_ID,
		3000 AS CURRENCY_ID,
		CASE
			WHEN t.DESCCONDCOBRO LIKE '%ITAU%' THEN 9
			WHEN t.DESCCONDCOBRO LIKE '%CREDITO%' THEN 5
			WHEN t.DESCCONDCOBRO LIKE '%SANTANDER%' THEN 8
			WHEN t.DESCCONDCOBRO LIKE '%TRANSBANK%' THEN 4
			WHEN t.DESCCONDCOBRO LIKE '%CHILE%' THEN 1
			ELSE NULL
		END AS BANK_ID,
		CASE
			WHEN t.DESCTPCONDCOBRO = 'CARGO A TARJETA' THEN '2028-10-01 00:00:00'
			ELSE NULL
		END AS EXPIRATION,
		NULL AS ACCOUNT_NBR,
		NULL AS INTER_ACCOUNT_NBR,
		NULL AS PAYMENT_KEY,
		NULL AS REQUIRES_RECEIPT
	FROM temp_polizas_data t
	JOIN POLICY po ON po.POLICY_NUMBER = t.NPOLIZA
	JOIN PARTY p ON p.PARTY_ID = po.PARTY_ID
	ON DUPLICATE KEY UPDATE
		PAYMENT_TYPE_ID = VALUES(PAYMENT_TYPE_ID),
		BANK_ID = VALUES(BANK_ID),
		EXPIRATION = VALUES(EXPIRATION);
	`

	if _, err := db.Exec(query); err != nil {
		return fmt.Errorf("error insertando PAYMENT_TERM: %v", err)
	}
	fmt.Println("Datos insertados en PAYMENT_TERM correctamente.")
	return nil
}
